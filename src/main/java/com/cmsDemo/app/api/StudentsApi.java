/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cmsDemo.app.api;

import com.cmsDemo.app.model.Student;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-08-20T11:36:07.743+05:30")

@Validated
@Api(value = "students", description = "the students API")
@RequestMapping(value = "")
public interface StudentsApi {

    @ApiOperation(value = "", nickname = "createStudent", notes = "Create new student", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 409, message = "Student with id already exists") })
    @RequestMapping(value = "/students",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createStudent(@ApiParam(value = "Student object" ,required=true )  @Valid @RequestBody Student body);


    @ApiOperation(value = "", nickname = "deleteStudent", notes = "Delete a student using ID", tags={  })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/students/{studentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStudent(@ApiParam(value = "ID of Student to return",required=true) @PathVariable("studentId") Long studentId);


    @ApiOperation(value = "", nickname = "getAllStudents", notes = "Returns a list of students", response = Student.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Student.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No students in DB") })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> getAllStudents();


    @ApiOperation(value = "", nickname = "getStudentById", notes = "Get a student using ID", response = Student.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Student.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Student not found") })
    @RequestMapping(value = "/students/{studentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Student> getStudentById(@ApiParam(value = "ID of Student to return",required=true) @PathVariable("studentId") Long studentId);


    @ApiOperation(value = "", nickname = "updateStudent", notes = "Update student", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 404, message = "Student with id does not exists") })
    @RequestMapping(value = "/students",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateStudent(@ApiParam(value = "Student object" ,required=true )  @Valid @RequestBody Student body);

}
